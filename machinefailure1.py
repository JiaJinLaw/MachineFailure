# -*- coding: utf-8 -*-
"""MachineFailure.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oEg6lOmFVnhPUn6dSZjp73JWZohy96ty
"""

pip install streamlit

import streamlit as st
import matplotlib.pyplot as plt
import pandas as pd

# Set a fixed plot size
plt.figure(figsize=(10, 6))

# Add a background image using custom CSS
background_image_path = "R.jfif"
st.image(background_image_path, use_column_width=True)  # Adjust 'use_column_width' based on your preference

# Title and Description
st.markdown("# Predictive Maintenance Tool")
st.title("Machine Learning in Equipment Failures Prevention")
st.write("In the manufacturing industry, high operating expenditures and operational disruptions, such as machine failures, impact production costs and delivery times, leading to poor customer service.")

# User Customization
st.title('Customize your target.')
quality_variant = st.selectbox("Type of Product Quality Variant", options=["High", "Medium", "Low"])

air_temperature = st.slider("Air Temperature", min_value=0.0, max_value=24.0, value=12.0, step=0.1)
process_temperature = st.slider("Process Temperature", min_value=0.0, max_value=24.0, value=12.0, step=0.1)
torque = st.slider("Torque", min_value=0.0, max_value=24.0, value=12.0, step=0.1)
speed = st.slider("Rotational Speed", min_value=0.0, max_value=24.0, value=12.0, step=0.1)

# Coefficients
coef_air_temperature = 64.977232
coef_process_temperature = 17.826341
coef_torque = 64.977232
coef_speed = 17.826341

# Calculate Tool Wear
tool_wear = coef_air_temperature * air_temperature + coef_process_temperature * process_temperature + coef_torque * torque + coef_speed * speed

# Display the predicted amount
st.write(f"Tool Wear: {tool_wear:.2f} min")

# Visualize the predicted amount
fig, ax = plt.subplots(figsize=(6, 4))

# Create the bar plot
bar_chart = ax.bar(["Predicted"], [tool_wear], color=['orange'])

# Add labels and title
ax.set_ylabel('Tool Wear (min)')
ax.set_title('Predicted Tool Wear Value')

# Add the predicted value as text on top of the bar with unit
ax.text(bar_chart[0].get_x() + bar_chart[0].get_width() / 2, tool_wear + 5,
        f'Predicted\n{tool_wear:.2f} min', ha='center', color='orange')

# Display the plot
st.pyplot(fig)