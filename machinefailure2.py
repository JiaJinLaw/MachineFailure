# -*- coding: utf-8 -*-
"""MachineFailure2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QubduNG4VUCcHpqZyz6h3PERuTtVn-sh
"""


import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

# Add a background image using custom CSS
background_image_path = "R.jfif"
st.image(background_image_path, use_column_width=True)  # Adjust 'use_column_width' based on your preference

st.markdown("# Predictive Maintenance Tool")
st.title("Machine Learning in Equipment Failures Prevention")

st.write(
    "In the manufacturing industry, high operating expenditures and operational disruptions, such as machine failures, impact production costs and delivery times, leading to poor customer service."
)

st.title('Customize your target.')

# Type selection
type_options = ["Low", "Medium", "High"]
selected_type = st.selectbox("Type of Product Quality Variant", options=type_options)

# Range selection using sliders
air_temperature_range = st.slider("Air Temperature [K]", min_value=295, max_value=304, value=(295, 304), step=1)
process_temperature_range = st.slider(
    "Process Temperature [K]", min_value=300, max_value=320, value=(300, 320), step=1
)
rotational_speed_range = st.slider("Rotational Speed [rpm]", min_value=1000, max_value=3000, value=(1000, 3000), step=100)
torque_range = st.slider("Torque [Nm]", min_value=0, max_value=100, value=(0, 100), step=1)
tool_wear_range = st.slider("Tool Wear [min]", min_value=0, max_value=300, value=(0, 300), step=1)

# Create a dictionary to hold the user input
user_input = {
    "Type": selected_type,
    "Air Temperature": air_temperature_range,
    "Process Temperature": process_temperature_range,
    "Rotational Speed": rotational_speed_range,
    "Torque": torque_range,
    "Tool Wear": tool_wear_range,
}

# Display the user input
st.write("User Input:", user_input)

# For demonstration purposes, let's assume a simple rule-based model
def predict_failure_type(user_input):
    tool_wear_threshold = 246
    torque_threshold = 60
    air_temperature_threshold = 300

    tool_wear = user_input["Tool Wear"][1]  # Assuming Tool Wear is the maximum value from the range

    if tool_wear > tool_wear_threshold:
        return "Tool wear failure"
    elif user_input["Torque"][1] > torque_threshold:
        return "Power failure"
    elif user_input["Air Temperature"][1] > air_temperature_threshold:
        return "Heat Dissipation failure"
    else:
        return "No Failure"

# Get the predicted failure type
predicted_failure_type = predict_failure_type(user_input)

# Display the predicted failure type
st.write(f"Predicted Failure Type: {predicted_failure_type}")
