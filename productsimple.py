# -*- coding: utf-8 -*-
"""ProductSimple.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YzHZI8YKccEkPsbL4fo4qX0PS7SFBzMf
"""

import streamlit as st
import matplotlib.pyplot as plt
import pandas as pd

# Set a fixed plot size
plt.figure(figsize=(10, 6))

# Add a background image using custom CSS
background_image_path = "OIP.jfif"
st.image(background_image_path, use_column_width=True)  # Adjust 'use_column_width' based on your preference

st.markdown("# WQD7001 GROUP 1")
st.title("EVOLUTION OF E-COMMERCE & CONSUMERS' BEHAVIOR TO FORECAST FUTURE E-COMMERCE TRENDSâ€‹")
st.write("MEMBERS: NUR SHAFIQAH, LAW JIA JIN, LIM CHENG YANG, LIM SZE SING, GAN JING WEN")

st.write("Our data product is a predictive analytics tool designed to assist businesses in forecasting the Yearly Amount Spent by their customers. Leveraging a Decision Tree Regression model, the system analyzes various customer attributes to generate accurate predictions, aiding businesses in making informed decisions.")
st.write("The interactive interface act as data product to facilitates a seamless user experience. Users can input values for Length of Membership and Time Spent, enabling them to dynamically visualize how these factors impact the predicted Yearly Amount Spent.")

st.title('Try to adjust the parameters.')
# Assuming length_of_membership is a variable with values from 1 to 10
length_of_membership = st.selectbox("Length of Membership", options=list(range(1, 11)), index=4)  # Default index can be adjusted

# Assuming time_spent is a variable with continuous values
time_spent = st.slider("Time Spent", min_value=0.0, max_value=24.0, value=12.0, step=0.1)

# Coefficients
coef_length_of_membership = 64.977232
coef_time_spent = 17.826341

# Calculate predicted Yearly Amount Spent
predicted_amount_spent = coef_length_of_membership * length_of_membership + coef_time_spent * time_spent

# Display the predicted amount
st.write(f"Predicted Yearly Amount Spent: ${predicted_amount_spent:.2f} USD")

# Set Y-axis limits
y_min = 0
y_max = 1200  # Adjust this based on your expected range

# Visualize the predicted amount
data = {'Category': ['Predicted'],
        'Amount': [predicted_amount_spent]}
prediction_df = pd.DataFrame(data)

# Create the bar plot
fig, ax = plt.subplots()
bar_chart = ax.bar(prediction_df['Category'], prediction_df['Amount'], color=['orange'])

# Add labels and title
ax.set_ylabel('Yearly Amount Spent (USD)')
ax.set_title('Predicted Yearly Amount Spent')

# Set Y-axis limits
ax.set_ylim(y_min, y_max)

# Add the predicted value as text on top of the predicted bar with unit
ax.text(bar_chart[0].get_x() + bar_chart[0].get_width() / 2, predicted_amount_spent + 5,
        f'Predicted\n${predicted_amount_spent:.2f}', ha='center', color='orange')

# Display the plot
st.pyplot(fig)